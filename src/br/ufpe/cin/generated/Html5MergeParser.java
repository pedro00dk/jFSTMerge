/* Generated By:JavaCC: Do not edit this line. Html5MergeParser.java */
package br.ufpe.cin.generated;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class Html5MergeParser extends AbstractFSTParser implements Html5MergeParserConstants {
    public Html5MergeParser() {}

  final public FSTInfo CompilationUnit(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
      case COMMENT_TO:
      case CDATA_TO:
      case DTD_TO:
      case XML_TO:
      case SC_LET1_TO:
      case SC_LET2_TO:
      case TO:
      case TEXT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n = Element(inTerminal);
                                replaceName(n);
    }
                                                    {if (true) return productionEndNonTerminal("CompilationUnit","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Element(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TO:
      n = TagBlock(inTerminal);
                                replaceName(n);
                                                  {if (true) return productionEndNonTerminal("Element1","-","-");}
      break;
    case COMMENT_TO:
      n = Comment(inTerminal);
                               replaceName("Comment", n);
                                                            replaceName(n);
                                                                              {if (true) return productionEndNonTerminal("Element2","{Comment}","{Comment}");}
      break;
    case CDATA_TO:
      n = Cdata(inTerminal);
                             replaceName("Cdata", n);
                                                        replaceName(n);
                                                                          {if (true) return productionEndNonTerminal("Element3","{Cdata}","{Cdata}");}
      break;
    case DTD_TO:
      n = Dtd(inTerminal);
                           replaceName("Dtd", n);
                                                    replaceName(n);
                                                                      {if (true) return productionEndNonTerminal("Element4","{Dtd}","{Dtd}");}
      break;
    case XML_TO:
      n = Xml(inTerminal);
                           replaceName("Xml", n);
                                                    replaceName(n);
                                                                      {if (true) return productionEndNonTerminal("Element5","{Xml}","{Xml}");}
      break;
    case SC_LET1_TO:
    case SC_LET2_TO:
      n = Sclet(inTerminal);
                             replaceName("Sclet", n);
                                                        replaceName(n);
                                                                          {if (true) return productionEndNonTerminal("Element6","{Sclet}","{Sclet}");}
      break;
    case WS:
    case TEXT:
      n = CharData(inTerminal);
                                replaceName("CharData", n);
                                                              replaceName(n);
                                                                                {if (true) return productionEndNonTerminal("Element7","{CharData}","{CharData}");}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TagBlock(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_2(2147483647)) {
      n = TagOpen(inTerminal);
                                                     replaceName("TagOpen", n);
                                                                                  replaceName(n);
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        n = Element(inTerminal);
                                                                                                                                        replaceName(n);
      }
      n = TagClose(inTerminal);
                                                                                                                                                                                   replaceName(n);
                                                                                                                                                                                                     {if (true) return productionEndNonTerminal("TagBlock1","{TagOpen}","{TagOpen}");}
    } else if (jj_2_3(2147483647)) {
      n = TagOpenClose(inTerminal);
                                                          replaceName("TagOpenClose", n);
                                                                                            replaceName(n);
                                                                                                              {if (true) return productionEndNonTerminal("TagBlock2","{TagOpenClose}","{TagOpenClose}");}
    } else if (jj_2_4(2147483647)) {
      n = EmptyTag(inTerminal);
                                                      replaceName("EmptyTag", n);
                                                                                    replaceName(n);
                                                                                                      {if (true) return productionEndNonTerminal("TagBlock3","{EmptyTag}","{EmptyTag}");}
    } else if (jj_2_5(2147483647)) {
      n = EmptyCloseTag(inTerminal);
                                                           replaceName("EmptyCloseTag", n);
                                                                                              replaceName(n);
                                                                                                                {if (true) return productionEndNonTerminal("TagBlock4","{EmptyCloseTag}","{EmptyCloseTag}");}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TagOpen(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = To(inTerminal);
                          replaceName(n);
    n = Id(inTerminal);
                                                             replaceName("Id", n);
                                                                                     replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      n = AttributeList(inTerminal);
                                                                                                                                    replaceName("AttributeList", n);
                                                                                                                                                                       replaceName(n);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    n = Tc(inTerminal);
                                                                                                                                                                                                           replaceName(n);
                                                                                                                                                                                                                             {if (true) return productionEndNonTerminal("TagOpen","tag->{Id}{AttributeList}","tag->{Id}{AttributeList}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TagClose(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = To(true);
                    replaceName(n);
    n = Ts(true);
                                                 replaceName(n);
    n = Id(true);
                                                                              replaceName(n);
    n = Tc(true);
                                                                                                           replaceName(n);
                                                                                                                             {if (true) return productionEndTerminal("TagClose","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TagOpenClose(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = To(inTerminal);
                          replaceName(n);
    n = Id(inTerminal);
                                                             replaceName("Id", n);
                                                                                     replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      n = AttributeList(inTerminal);
                                                                                                                                    replaceName("AttributeList", n);
                                                                                                                                                                       replaceName(n);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n = Ts(inTerminal);
                                                                                                                                                                                                           replaceName(n);
    n = Tc(inTerminal);
                                                                                                                                                                                                                                              replaceName(n);
                                                                                                                                                                                                                                                                {if (true) return productionEndNonTerminal("TagOpenClose","ctag->{Id}{AttributeList}","ctag->{Id}{AttributeList}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EmptyTag(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = To(inTerminal);
                          replaceName(n);
    n = EId(inTerminal);
                                                              replaceName("EId", n);
                                                                                       replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      n = AttributeList(inTerminal);
                                                                                                                                      replaceName(n);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    n = Tc(inTerminal);
                                                                                                                                                                          replaceName(n);
                                                                                                                                                                                            {if (true) return productionEndNonTerminal("EmptyTag","etag->{EId}","etag->{EId}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EmptyCloseTag(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = To(inTerminal);
                          replaceName(n);
    n = EId(inTerminal);
                                                              replaceName("EId", n);
                                                                                       replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      n = AttributeList(inTerminal);
                                                                                                                                      replaceName("AttributeList", n);
                                                                                                                                                                         replaceName(n);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    n = Ts(inTerminal);
                                                                                                                                                                                                             replaceName(n);
    n = Tc(inTerminal);
                                                                                                                                                                                                                                                replaceName(n);
                                                                                                                                                                                                                                                                  {if (true) return productionEndNonTerminal("EmptyCloseTag","ectag->{EId}{AttributeList}","ectag->{EId}{AttributeList}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Comment(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COMMENT_TO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
      jj_consume_token(COMMENT);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(COMMENT_TC);
                                               {if (true) return productionEndTerminal("Comment","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Cdata(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CDATA_TO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CDATA:
      jj_consume_token(CDATA);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(CDATA_TC);
                                         {if (true) return productionEndTerminal("Cdata","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Dtd(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DTD_TO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DTD:
      jj_consume_token(DTD);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(DTD_TC);
                                   {if (true) return productionEndTerminal("Dtd","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Xml(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(XML_TO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XML:
      jj_consume_token(XML);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(XML_TC);
                                   {if (true) return productionEndTerminal("Xml","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Sclet(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SC_LET1_TO:
      n = Sclet1(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("Sclet1","-","{TOSTRING}","Replacement","Default",first,token);}
      break;
    case SC_LET2_TO:
      n = Sclet2(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("Sclet2","-","{TOSTRING}","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Sclet1(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SC_LET1_TO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SC_LET1:
      jj_consume_token(SC_LET1);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(SC_LET1_TC);
                                               {if (true) return productionEndTerminal("Sclet1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Sclet2(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SC_LET2_TO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SC_LET2:
      jj_consume_token(SC_LET2);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(SC_LET2_TC);
                                               {if (true) return productionEndTerminal("Sclet2","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CharData(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_3:
    while (true) {
      n = Text(true);
                                    replaceName(n);
      if (jj_2_6(2)) {
        ;
      } else {
        break label_3;
      }
    }
                                                        {if (true) return productionEndTerminal("CharData","-","ws->{AUTO}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Text(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      jj_consume_token(TEXT);
                {if (true) return productionEndTerminal("Text1","-","-","Replacement","LineBased",first,token);}
      break;
    case WS:
      jj_consume_token(WS);
              {if (true) return productionEndTerminal("Text2","-","-","Replacement","LineBased",first,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Script(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ScriptTo(inTerminal);
                                replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      n = AttributeList(inTerminal);
                                                                               replaceName(n);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCRIPT:
      n = ScriptContent(inTerminal);
                                                                                                                               replaceName(n);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    n = ScriptTc(inTerminal);
                                                                                                                                                                         replaceName(n);
                                                                                                                                                                                           {if (true) return productionEndNonTerminal("Script","script->{AUTO}","script->{AUTO}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Style(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = StyleTo(inTerminal);
                               replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      n = AttributeList(inTerminal);
                                                                              replaceName(n);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STYLE:
      n = StyleConent(inTerminal);
                                                                                                                            replaceName(n);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    n = StyleTc(inTerminal);
                                                                                                                                                                     replaceName(n);
                                                                                                                                                                                       {if (true) return productionEndNonTerminal("Style","style->{AUTO}","style->{AUTO}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AttributeList(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_4:
    while (true) {
      n = Attribute(inTerminal);
                                  replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_4;
      }
    }
                                                      {if (true) return productionEndNonTerminal("AttributeList","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Attribute(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_7(2)) {
      n = Id(inTerminal);
                                       replaceName("Id", n);
                                                               replaceName(n);
      n = Assign(inTerminal);
                                                                                                      replaceName(n);
      n = AttrValue(inTerminal);
                                                                                                                                                replaceName(n);
                                                                                                                                                                  {if (true) return productionEndNonTerminal("Attribute1","{Id}","{Id}");}
    } else if (jj_2_8(2)) {
      n = Id(inTerminal);
                                       replaceName("Id", n);
                                                               replaceName(n);
                                                                                 {if (true) return productionEndNonTerminal("Attribute2","{Id}","{Id}");}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Id(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ID);
              {if (true) return productionEndTerminal("Id","{TOSTRING}","{TOSTRING}","Replacement","LineBased",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EId(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(E_ID);
                {if (true) return productionEndTerminal("EId","{TOSTRING}","{TOSTRING}","Replacement","LineBased",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AttrValue(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ATTR_VALUE);
                      {if (true) return productionEndTerminal("AttrValue","-","-","Replacement","LineBased",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Assign(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ASSIGN);
                  {if (true) return productionEndTerminal("Assign","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo To(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(TO);
              {if (true) return productionEndTerminal("To","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Tc(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(TC);
              {if (true) return productionEndTerminal("Tc","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Ts(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(TS);
              {if (true) return productionEndTerminal("Ts","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ScriptTo(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SCRIPT_TO);
                     {if (true) return productionEndTerminal("ScriptTo","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ScriptTc(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SCRIPT_TC);
                     {if (true) return productionEndTerminal("ScriptTc","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ScriptContent(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SCRIPT);
                  {if (true) return productionEndTerminal("ScriptContent","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StyleTo(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STYLE_TO);
                    {if (true) return productionEndTerminal("StyleTo","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StyleTc(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STYLE_TC);
                    {if (true) return productionEndTerminal("StyleTc","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StyleConent(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STYLE);
                 {if (true) return productionEndTerminal("StyleConent","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_21()) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_12()) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_21()) return true;
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_21()) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_12()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    if (jj_3R_41()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_21()) return true;
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    if (jj_3_6()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(SC_LET2_TO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    if (jj_scan_token(SC_LET2_TC)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(SC_LET1_TO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) jj_scanpos = xsp;
    if (jj_scan_token(SC_LET1_TC)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(TS)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(TC)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(XML_TO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    if (jj_scan_token(XML_TC)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(TO)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(DTD_TO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) jj_scanpos = xsp;
    if (jj_scan_token(DTD_TC)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(CDATA_TO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) jj_scanpos = xsp;
    if (jj_scan_token(CDATA_TC)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(ATTR_VALUE)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(COMMENT_TO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) jj_scanpos = xsp;
    if (jj_scan_token(COMMENT_TC)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(E_ID)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_21()) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  public Html5MergeParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x4fe,0x4fe,0x80000000,0x80000000,0x80000000,0x80000000,0x1000,0x4000,0x10000,0x40000,0xc0,0x100000,0x400000,0x2,0x80000000,0x1000000,0x80000000,0x4000000,0x80000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Html5MergeParser(CharStream stream) {
    token_source = new Html5MergeParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Html5MergeParser(Html5MergeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(Html5MergeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[42];
    for (int i = 0; i < 42; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
